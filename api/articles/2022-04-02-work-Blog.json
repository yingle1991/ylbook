{"title":"Mac本地Flutter版本切换","slug":"2022-04-02-work-Blog","date":"2022-02-28T16:00:00.000Z","updated":"2022-04-03T12:42:06.306Z","comments":true,"path":"api/articles/2022-04-02-work-Blog.json","excerpt":null,"covers":["https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png"],"content":"<p><em>前置：学会消费者设计模式</em></p>\n<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>近期集团在做工厂层移动应用，因为是工厂嘛，要对接各种个样的设备（门禁、称重、装车），所以核心应用都放在了各个工厂内。而移动端想统一、统筹管理，想把应用接口提到上层管理配置，而由于项目没有引入mq消息队列框架， 所以创建一个轻量级消息队列来缓存 各个工厂的接口地址与密钥，内存的话肯定选择 redis 啊，废话不多说直接干吧：</p>\n<p>我们先来比较一下 redis 消息队列的两种方式RPOP LPUSH vs Pub/Sub</p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><ol>\n<li>Pub/Sub 订阅/发布</li>\n</ol>\n<ul>\n<li><p>这种模式就好比 无线电台，所有订阅队列的使用者豆浆接受发不到该队列的所有消息。</p>\n</li>\n<li><p>工作流程</p>\n<p>消费者 C1、C2、C3 订阅队列 q<br>生产者 P 将消息m发布到队列 q<br>队列 q 向所有消费者 C1、C2、C3 发送消息</p>\n</li>\n</ul>\n<pre class=\"mermaid\">graph TD\nA[生产者 P] -->|发布消息 m| B(队列 Q)   \nB --> |发送 m| D[消费者 C1]    \nB --> |发送 m| E[消费者 C2]  \nB --> |发送 m| F[消费者 C3]</pre>\n<ul>\n<li><p>优点和问题</p>\n<p>由于内存缓冲区的效率，如果消费者失去了与队列的连接，那么消费者很有可能在连接丢失时丢失消息。Redis服务器决定清除消息缓冲区，为下一个传入的消息节省更多的内存。</p>\n</li>\n</ul>\n<p>分享程序员的理财、生活！我是乐子，多多指教！</p>\n<ul>\n<li>EOF -<br><img src=\"https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png\" alt=\"关注我得到更多信息\"></li>\n</ul>\n","more":"<p><em>前置：学会消费者设计模式</em></p>\n<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>近期集团在做工厂层移动应用，因为是工厂嘛，要对接各种个样的设备（门禁、称重、装车），所以核心应用都放在了各个工厂内。而移动端想统一、统筹管理，想把应用接口提到上层管理配置，而由于项目没有引入mq消息队列框架， 所以创建一个轻量级消息队列来缓存 各个工厂的接口地址与密钥，内存的话肯定选择 redis 啊，废话不多说直接干吧：</p>\n<p>我们先来比较一下 redis 消息队列的两种方式RPOP LPUSH vs Pub/Sub</p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><ol>\n<li>Pub/Sub 订阅/发布</li>\n</ol>\n<ul>\n<li><p>这种模式就好比 无线电台，所有订阅队列的使用者豆浆接受发不到该队列的所有消息。</p>\n</li>\n<li><p>工作流程</p>\n<p>消费者 C1、C2、C3 订阅队列 q<br>生产者 P 将消息m发布到队列 q<br>队列 q 向所有消费者 C1、C2、C3 发送消息</p>\n</li>\n</ul>\n<pre class=\"mermaid\">graph TD\nA[生产者 P] -->|发布消息 m| B(队列 Q)   \nB --> |发送 m| D[消费者 C1]    \nB --> |发送 m| E[消费者 C2]  \nB --> |发送 m| F[消费者 C3]</pre>\n<ul>\n<li><p>优点和问题</p>\n<p>由于内存缓冲区的效率，如果消费者失去了与队列的连接，那么消费者很有可能在连接丢失时丢失消息。Redis服务器决定清除消息缓冲区，为下一个传入的消息节省更多的内存。</p>\n</li>\n</ul>\n<p>分享程序员的理财、生活！我是乐子，多多指教！</p>\n<ul>\n<li>EOF -<br><img src=\"https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png\" alt=\"关注我得到更多信息\"></li>\n</ul>\n","categories":[],"tags":[{"name":"flutter","path":"api/tags/flutter.json"},{"name":"全栈","path":"api/tags/全栈.json"}]}