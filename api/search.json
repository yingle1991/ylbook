[{"title":"Mac本地Flutter版本切换","slug":"2022-04-02-work-Blog","url":"/2022/03/01/2022-04-02-work-Blog/","content":"\n\n*前置：学会消费者设计模式*\n\n#### 背景\n\n近期集团在做工厂层移动应用，因为是工厂嘛，要对接各种个样的设备（门禁、称重、装车），所以核心应用都放在了各个工厂内。而移动端想统一、统筹管理，想把应用接口提到上层管理配置，而由于项目没有引入mq消息队列框架， 所以创建一个轻量级消息队列来缓存 各个工厂的接口地址与密钥，内存的话肯定选择 redis 啊，废话不多说直接干吧：\n\n我们先来比较一下 redis 消息队列的两种方式RPOP LPUSH vs Pub/Sub\n\n#### 介绍\n\n1. Pub/Sub 订阅/发布\n\n* 这种模式就好比 无线电台，所有订阅队列的使用者豆浆接受发不到该队列的所有消息。\n\n* 工作流程\n\n  消费者 C1、C2、C3 订阅队列 q\n  生产者 P 将消息m发布到队列 q\n  队列 q 向所有消费者 C1、C2、C3 发送消息\n \n```mermaid\ngraph TD\nA[生产者 P] -->|发布消息 m| B(队列 Q)   \nB --> |发送 m| D[消费者 C1]    \nB --> |发送 m| E[消费者 C2]  \nB --> |发送 m| F[消费者 C3]   \n\n```\n* 优点和问题\n  \n  由于内存缓冲区的效率，如果消费者失去了与队列的连接，那么消费者很有可能在连接丢失时丢失消息。Redis服务器决定清除消息缓冲区，为下一个传入的消息节省更多的内存。\n\n\n```yuml\n(start)-><a>[kettle empty]->(Fill Kettle)->|b|\n<a>[kettle full]->|b|->(Boil Kettle)->|c|\n|b|->(Add Tea Bag)->(Add Milk)->|c|->(Pour Water)\n(Pour Water)->(end)\n\n```   \n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n   - EOF -\n     ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["flutter","全栈"]},{"title":"Mac本地Flutter版本切换","slug":"2022-03-01-work-Blog","url":"/2022/03/01/2022-03-01-work-Blog/","content":"\n\n####Flutter 路径指定 .bash_profile文件配置\n\n###### Flutter 路径指定 .bash_profile文件配置\n\n```export FLUTTER_ROOT=/Users/xxxx/Library/Flutter/xxx\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn #国内用户需要设置\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn #国内用户需要设置\nexport PATH=/Users/xxxx/Library/Flutter/bin:$PATH\n```\n\n <!-- more--> \n\n###### Flutter 版本切换方式\n\n1. 命令切换版本（速度较慢）\n\n``` \nflutter channel  // 查看channel\n\nflutter --version // 查看当前的版本\n\nflutter version 1.12xxxx // 切换版本\n\n>>>\nFlutter 1.17.0-4.0.pre.2 • channel unknown • unknown source\nFramework • revision 0aadddae17 (7 个月前) • 2020-05-26 17:34:45 +0800\nEngine • revision 540786dd51\nTools • Dart 2.8.1\n>>>\n```\n2. 本地目录升级（git 方式）\n\n```\ncd ..  // 目录 /Users/xxxx/Library/Flutter/xxx\n\ngit tag .// 查看版本\n\ngit checkout xxxx   // 切换版本\n\ngit reset -hard xxxx  //  commitId\n\n```\n\n##### 注意点\n\n- 不同Flutter版本构建的项目，都会有. package 不一样，切换完后执行 Flutter 命令会报错\n需要移除.package文件，重新构建 flutter build\n- 非flutter创建的项目、vscode执行调试时,主工程项目可能无法运行起来，需要提前运行起项目\n- vscode开发时，如果没有自己想要的模拟器选项，先通过原生项目将其运行起来，然后点击调试\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n   - EOF -\n     ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["flutter","全栈"]},{"title":"设计模式之一","slug":"2021-12-21-work-Blog","url":"/2021/12/21/2021-12-21-work-Blog/","content":"\n\n1. 简单工厂模式\n\n   - 定义\n\n     严格意义简单工厂模式并非设计模式，比较像一种编码习惯。由于经常被使用，因此被大多数程序研发人员误认为是“工厂模式”。\n\n     <!-- more--> \n\n   - 类图\n\n     ```mermaid\n         classDiagram\n             PizzaStore --|> SimpleFactory\n             SimpleFactory --|>Pizza\n             Pizza <|.. CheesePizza\n             Pizza <|.. VeggiePizza\n             Pizza : +String name\n             Pizza : +String area\n             Pizza : +准备()\n             Pizza : +烘焙()\n             Pizza : +装饰()\n             Pizza : +打包()\n             class PizzaStore{\n                     SimpleFactory factory\n                 +Pizza OrderPizza()\n             }\n             class SimpleFactory{\n                 +Pizza createPizza()\n             }\n             class CheesePizza{\n             }\n             class VeggiePizza{\n             }\n         \n     ```\n\n     \n\n   - 解释\n\n     适用于小作坊，包含多个具体产品，\n     SimpleFactory 就是生产产品的工厂，他应该是我们唯一用到具体Pizza类（CheesePizza、VeggiePizza）的地方。\n     PizzaStore 是工厂的客户，通过SimpleFactory 工厂取得Pizza实例。\n     \n     \n\n2. 工厂方法模式\n\n   - 定义\n     定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，工厂方法让类把实例化推迟到子类。\n\n   - 类图\n\n     ```mermaid\n         classDiagram\n             PizzaStore <|.. NYPizzaStore\n             PizzaStore <|.. ChinaPizzaStore\n             PizzaStore --|> Pizza\n             Pizza <|.. NYPizza\n             Pizza <|.. ChinaPizza\n             NYPizzaStore --|> NYPizza\n             ChinaPizzaStore --|>ChinaPizza\n             <&lt;abstract>> Pizza\n             Pizza : +String name\n             Pizza : +String area\n             Pizza : +准备()\n             Pizza : +烘焙()\n             Pizza : +装饰()\n             Pizza : +打包()\n             class PizzaStore{\n                 +final OrderPizza()\n                 +Pizza createPizza()\n             }\n             class NYPizzaStore{\n                 +Pizza createPizza()\n             }\n             class ChinaPizzaStore{\n                 +Pizza createPizza()\n             }\n             \n             class NYPizza{\n             \n             }\n             class ChinaPizza{\n             }\n     ```\n\n\n        ```\n   - 解释\n        满足于连锁店，多个具体产品要适应多种地域特色，比如纽约的具体产品和中国的具体产品是味道是不一样的。\n        抽象创建者（Creator）类  PizzaStore 定义了一个抽象的工厂方法 createPizza，让子类（具体创建者）实现此方法制造自己的产品，他通常包含依赖于抽象产品的代码，而这些抽象产品由子类制造，他并不需要真的知道 在制造哪种具体产品。\n        工厂生产产品，对于创建者 PizzaStore来说，产品就是Pizza，他的子类是具体的产品，所有实际生产出来的Pizza 都是他的子类。\n   - 优缺点\n        解决了产品维度新增问题（新增具体产品的问题），只需要创建Pizza子类 ，并创建PizzaStore（创建者）的子类即可。\n   - 引申 \n        + 依赖倒置原则（要依赖抽象，不要依赖具体类）\n        变量不可以持有具体类的引用\n        不要让类派生自具体类\n        不要覆盖基类中已实现的方法\n\n3. 抽象工厂模式\n\n   - 定义\n       提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。\n\n   - 类图\n        ```mermaid\n            classDiagram\n                PizzaStore <|.. NYPizzaStore\n                PizzaStore <|.. ChinaPizzaStore\n                PizzaStore --|> Pizza\n                Pizza <|.. ChinaPizza\n                Pizza <|.. NYPizza\n                NYPizzaStore --|> NYPizza\n                ChinaPizzaStore --|>ChinaPizza\n                <&lt;abstract>> Pizza\n                Pizza : +String name\n                Pizza : +String area\n                Pizza : +准备材料()\n                Pizza : +烘焙()\n                Pizza : +装饰()\n                Pizza : +打包()\n                class PizzaStore{\n                        <&lt;abstract>>\n                    +final OrderPizza()\n                    +Pizza createPizza()\n                }\n                class NYPizzaStore{\n                    +Pizza createPizza()\n                }\n                class ChinaPizzaStore{\n                    +Pizza createPizza()\n                }\n            \n                class NYPizza{\n                \n                }\n                class ChinaPizza{\n                }\n                NYPizzaIngredientFactory <|-- NYPizzaStore\n                class PizzaIngredientFactory{\n                    <&lt;interface>>\n                    +创建蘸酱\n                    +创建面饼\n                    +创建蔬菜\n                    +创建肉\n                    +创建芝士\n                }\n                PizzaIngredientFactory <|.. NYPizzaIngredientFactory\n                class NYPizzaIngredientFactory{\n                    +创建蘸酱\n                    +创建面饼\n                    +创建蔬菜\n                    +创建肉\n                    +创建芝士\n                }\n                PizzaIngredientFactory <|.. ChinaPizzaIngredientFactory\n                class ChinaPizzaIngredientFactory{\n                    +创建蘸酱\n                    +创建面饼\n                    +创建蔬菜\n                    +创建肉\n                    +创建芝士\n                }\n                蘸酱 <|.. 北京蘸酱\n                蘸酱 <|.. 纽约蘸酱\n                PizzaIngredientFactory --|>蘸酱\n                NYPizzaIngredientFactory --|>纽约蘸酱\n                ChinaPizzaIngredientFactory --|>北京蘸酱\n                NYPizza --|>蘸酱\n                class 蘸酱{\n                    <&lt;interface>>    \n                }\n                面饼 <|.. 北京面饼\n                面饼 <|.. 纽约面饼\n                PizzaIngredientFactory --|>面饼\n                NYPizzaIngredientFactory --|>纽约面饼\n                ChinaPizzaIngredientFactory --|>北京面饼\n                NYPizza --|>面饼\n                class 面饼{\n                    <&lt;interface>>    \n                }\n                芝士 <|.. 北京芝士\n                芝士 <|.. 纽约芝士\n                PizzaIngredientFactory --|>芝士\n                NYPizzaIngredientFactory --|>纽约芝士\n                ChinaPizzaIngredientFactory --|>北京芝士\n                NYPizza --|>芝士\n                NYPizza --|>PizzaIngredientFactory\n                class 芝士{\n                    <&lt;interface>>    \n                }\n            \n        ```\n\n   - 解释\n     NYPizzaStore 是抽象工厂的客户，负责创建Pizza 具体产品（NYPizza） ， 传入原料工厂的实例（NYPizzaIngredientFactory），工厂被要求准备原料。\n     PizzaIngredientFactory 是抽象的Pizza原料工厂接口，他定义了如何产生一个相关产品的家族，这个家族包含了所有制作Pizza的原料，子类负责生产Pizza原料，每个工厂都知道如何产生符合自己区域的正确产品，对于此产品家族，每个工厂都有不同的实现，ChinaPizzaIngredientFactory，生产 北京面饼、北京芝士、北京蘸酱。\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n   - EOF -\n     ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["设计思路","架构之路"]},{"title":"博客支持 mermaid","slug":"2021-12-17-work-Blog","url":"/2021/12/17/2021-12-17-work-Blog/","content":"\n\n\n安装插件\nnpm install hexo-filter-mermaid-diagrams\n修改配置文件\n在hexo的_config.yml文件（根目录的并非主题的）中，添加以下内容：\n<!-- more--> \n\n```# mermaid chart\nmermaid: ## mermaid url https://github.com/knsv/mermaid\n  enable: true  # default true\n  version: \"7.1.2\" # default v7.1.2\n  options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js\n    #startOnload: true  // default true\n```\njs文件修改\n1. 修改位置 （next主题为例）\n   \n```\nthemes/next/layout/_partials/footer.swig\n```\n\n1. 根据footer的格式不同，添加的内容不同。\n格式有after_footer.pug , after-footer.ejs ,footer.swig等。\n以下是在next的footer.swig添加的内容。其他格式参考github: hexo-filter-mermaid-diagrams\n\n```\n{% if theme.mermaid.enable %}\n  <script src='https://unpkg.com/mermaid@{{ theme.mermaid.version }}/dist/mermaid.min.js'></script>\n  <script>\n    if (window.mermaid) {\n      mermaid.initialize({{ JSON.stringify(theme.mermaid.options) }});\n    }\n  </script>\n{% endif %}\n```\n到此为止，设置的部分就结束了。\n\n\n1. UML类图\n\n\n\n```mermaid\nclassDiagram\n      Animal <|-- Duck\n      Animal <|-- Fish\n      Animal <|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }\n```\n\n2. UML 甘特图\n\n\n\n```mermaid\ngantt\n    title 工作计划\n    dateFormat  YYYY-MM-DD\n    section Section\n    A task           :a1, 2020-01-01, 30d\n    Another task     :after a1  , 20d\n    section Another\n    Task in sec      :2020-01-12  , 12d\n    another task      : 24d\n```\n\n3. 时序图\n\n    ```\n   - 代表实线 ， 主动发送消息，比如 request请求\n   > 代表实心箭头 ， 同步消息，比如 AJAX 的同步请求\n   -- 代表虚线，表示返回消息，spring Controller return\n   >> 代表非实心箭头 ，异步消息，比如AJAX请求\n    ```\n\n   \n\n```mermaid\nsequenceDiagram\n\tTitle: md时序图练习\n\t\n    participant 客户端\n    participant 控制器\n    participant 业务\n    participant 数据库\n    \n     客户端->>数据库:提交数据店铺\n     Note right of 客户端:提交数据进行验证\n     控制器->>控制器:验证数据完整性\n     Note left of 控制器:返回错误的字段信息\n     控制器-->>客户端:数据不完整\n     Note over 客户端: 用户输入通行证的账号、密码\n     控制器->>业务:保存店铺到数据库\n     业务->>业务:save店铺数据\n     业务-->>控制器:保存出现异常\n     控制器-->>客户端:保存成功\n     数据库-->>业务:success\n     业务-->>控制器:success\n     控制器-->>客户端:success 客户端\n     Note left of 控制器:返回正确的提示，并跳转到审核第二步\n\n```\n\n\n\n\n\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n                                                    - EOF -\n   ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["mysql","开源"]},{"title":"H5 小程序 CSS 控制 文字显示两种颜色","slug":"2021-11-19-self-Blog","url":"/2021/11/19/2021-11-19-self-Blog/","content":"\n百度告诉我 attr\n\n<!-- more--> \n\n```\n<view content=\"19\" class=\"_span\">19</view>\n\n._span {\n\t\tfont-size: 150upx;\n\t\tfont-weight: 900;\n\t\tcolor: black;\n\t\tfont-family: 'Courier New', Courier, monospace;\n\t}\n\n\t._span::before {\n\t\tposition: absolute;\n\t\theight: 50%;\n\t\tcontent: attr(content);\n\t\toverflow: hidden;\n\t\tcolor: white;\n\t\tz-index: 999;\n\t}\n\n```\n\n但是 H5显示正常 部署到小程序  就是不行 一直读不到 ::before 的content\n\n于是查看小程序API 确认不支持 attr 属性\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n                                                    - EOF -\n   ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["小程序","css"]},{"title":"微信小程序调用腾讯地图返回 IP未被授权错误。","slug":"2021-11-18-self-Blog","url":"/2021/11/18/2021-11-18-self-Blog/","content":"\n\n功能需求\n\n微信小程序提供的接口能够获取到当前位置的坐标（经纬度），但是不能得到当前位置的地址。或者从后台获取到坐标（经纬度）要解析成文字描述的地址小程序也没有对应的接口。\n\n实现思路\n<!-- more--> \n\n这时候就需要通过腾讯位置服务来实现，但在这之前需要有腾讯位置服务的账号和开发密钥（key）。实现过程我就简单参看官网上的步骤，这里主要给大家几个前车之鉴，欢迎各位小伙伴留言补充。\n\n官网：[腾讯地图](http://lbs.qq.com/index.html)\n\n\n关键代码\n\n// 引入SDK核心类\nvar QQMapWX = require('../../utils/js/qqmap-wx-jssdk.js');\nvar qqmapsdk;\n \nPage({\n \n    onLoad: function () {\n        // 实例化API核心类\n        var qqmapsdk = new QQMapWX({\n            key: 'xxxx-xxxx-xxxx-xxxx-xxxx-xxxx' // 开发密钥（key）必填\n        });\n    },\n \n    // 获取当前地理坐标\n    onReady: function () {\n        var _this = this;\n        wx.getLocation({\n          type: 'gcj02',\n          altitude: true,\n          success: (res) => {\n            var latitude = res.latitude // 经度\n            var longitude = res.longitude // 纬度\n            // 根据坐标调用 pointToAddress 方法\n            _this.pointToAddress(latitude, longitude, function (address) {\n                // 得到最终地址\n                console.log(address);\n            }\n          }\n        })\n    },\n \n    // 定义 pointToAddress 方法\n    pointToAddress: function (latitude, longitude, callback) {\n        var _this = this;\n        // 调用接口\n        qqmapsdk.reverseGeocoder({\n          location: {\n            latitude: latitude,\n            longitude: longitude\n          },\n          success: function (res) {\n            // 解析成功返回地址\n            callback(res.result.address);\n          },\n          fail: function (res) {\n            console.log(res);\n          },\n          complete: function (res) {\n            console.log(res);\n          }\n        });\n    },\n})\n \n\n报错处理\n\n常见报错（一）我在实际应用中并未遇到，这个域名写不写应该均可；\n\n报错：http://apis.map.qq.com 不在以下 request 合法域名列表中\n\n原因：出现这个报错是因为你在小程序中发起了wx.request请求,但是请求的域名(http://apis.map.qq.com)没有在微信公众平台后台配置。\n\n解决方法：配置request合法域名，把https://apis.map.qq.com添加到你的request合法域名中。(微信公众平台—设置—开发设置—服务器域名)。\n\n\nTips：添加后需刷新项目，并重新编译才会有效果，否则可能无效。\n\n \n\n常见报错（二）\n\n**此报错解决方案1仅限 在服务器端掉用时，因为服务器的IP一般是固定的，小程序报错解决方案请参照方案2**\n\n报错：请求来源未被授权\n\n方案1（服务端掉用）：没有配置开发密钥(key)或者配置错误。\n\n解决方法：在腾讯位置服务平台(https://lbs.qq.com/)设置开发密钥(key)的 WebServiceAPI 授权IP。(控制台—密钥(key)管理—密钥设置)。\n\n\n\n第一步：勾选微信小程序，并填写小程序ID。\n\n第二步：勾选WebServiceAPI，并设置授权IP(你的服务器域名或IP)。\n\nTips：同样添加后刷新项目，并重新编译才会有效果，否则可能无效。\n\n我的用小程序调用参照此方法设置成本地IP了，本地正常访问，但是部署到体验版，一样报错 \n\n![](https://gitee.com/yingle1991/resource/raw/master/2021-11-18/1637244751613-image.png)\n\n![](https://img.soogif.com/sjo887jBzEvoHHtjBdo0lAVfMbXkGtva.png?scope=mdnice)\n\n\n方案2（小程序端掉用）:\n\n解决方法：在腾讯位置服务平台(https://lbs.qq.com/)设置开发密钥(key)的 WebServiceAPI 授权IP。(控制台—密钥(key)管理—密钥设置)。\n\n\n\n第一步：勾选微信小程序，并填写小程序ID。\n\n第二步：勾选域名白名单，并设置域名-》servicewechat.com。\n\n\n![](https://gitee.com/yingle1991/resource/raw/master/2021-11-18/1637244867048-image.png)\n\n测试结果\n\n测试没问题，能取到数据，并且零报错。\n\n\nTips：这些方法不仅适用于坐标解析(reverseGeocoder)，还适用于距离计算(calculateDistance)，地点搜索(search)，获取城市列表(getCityList)等等场景。\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n                                                    - EOF -\n   ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["开源","小程序"]},{"title":"我是程序员，邀请你和我一起帮助宝贝回家。","slug":"2021-11-08-life-Blog","url":"/2021/11/08/2021-11-08-life-Blog/","content":"\n\n\n\n\n做了很久的程序猿，总想为社会公益献出一份力！孩子的安好，永远牵动着人们的心～\n\n今天，来讲一个由腾讯公益发起的互联网公益活动：宝贝，公益404带你们回家。\n\n\n\n改变世界的不是技术，是技术背后的梦想和责任！国人要爱管闲事，在机场码头车站看见任何可疑孩子都应该过去问一下，也许你的爱管闲事会救下孩子，中国需要更多爱管闲事的人。\n\n<!-- more--> \n\n[腾讯公益]: https://www.qq.com/404\n\n![图片](https://gitee.com/yingle1991/resource/raw/master/2021-11-9/1636419516723-image.png)\n\n接入方式非常简单，就只需要加入一行代码到你的 404 页面即可：\n\n\n```\n<script type=\"text/javascript\"\n    src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" \n    charset=\"utf-8\">\n</script>\n\n```\n\n同时，在404页面，默认是返回腾讯网，但是这个超链接可以定制化，修改homePageUrl和homePageName两个参数即可。\n\n\n```\n<script type=\"text/javascript\"\n    src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" \n    charset=\"utf-8\" \n    homePageUrl=\"http://yoursite.com/yourPage.html\" homePageName=\"回到我的主页\">\n</script>\n```\n\n这样的 404 页面被人触发，然后偶然瞟一眼的概率大吗？\n\n是的，不大，甚至可以说非常低。\n\n但是，非常低，也属于有一定的概率，哪怕是一万个人中只有一个人看了一眼呢？这一眼，也许就能带来一点点的希望。\n\n### 然而我对接完的界面是这样的：\n\n![](https://gitee.com/yingle1991/resource/raw/master/2021-11-9/1636419687444-image.png)\n\n![](https://img.soogif.com/RNFWjMTwYmgAqDbyRF5J1PJ3dhB16La6.gif?scope=mdnice)\n\n\n既然想做就得做完整，继续百度。。。\n\n[博客预览]: http://www.blog.rdtalk.cn/404\n\n仅需要在404页面加几行代码即可\n\n\n```\n<iframe src=\"https://api.isoyu.com/gy/\" frameborder=\"0\" scrolling=\"no\" width=\"300\" height=\"400\"></iframe>\n```\n\n完成\n\n我国失踪儿童找回的概率有多大，我不知道，但是我知道的是概率肯定不是 100%。哪怕它是 99.99% 呢，谁愿意去承担那令人心碎的 0.01%？\n我看到过太多太多令人心碎的、抱头痛哭的认亲场面了，这背后大多都是横跨几年，十几年，甚至几十年时间的相认，唏嘘不已。\n\n这个项目的出发点和落地都非常好，我也知道贡献的力量肯定是非常有限，但是哪怕是一丝丝有限的力量也好呀。\n\n有希望总是好的。\n\n小的时候我们都学过：勿以善小而不为，勿以恶小而为之。\n\n让科技更有温度，何乐而不为？因此 我呼吁用一行代码帮助宝贝回家～\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n                                                    - EOF -\n   ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["生活","技术"]},{"title":"我是程序员，抱上笔记本，来一场说走就走的旅行，知你如知己，正如写到这，想到了你此刻的目光。","slug":"2021-02-24-work-Blog","url":"/2021/02/24/2021-02-24-work-Blog/","content":"\n\n\n#### 序\n\n\n\n随着企业安全意识越来越强烈，每个企业都会进行内网防护，但是我们又有在家办公的需要、作为运维的我们出去度假，公司项目又有新情况，接下来怎么办呢？\n\n我常出差：链接系统远程桌面，在外模拟家中电脑，提取资料简单快捷。\n\n<!-- more--> \n\n##### 一、在你的linux系统中开启sshd\n\n* systemctl status sshd    查看服务状态\n* systemctl start sshd      打开服务\n* systemctl stop sshd      关闭服务\n* systemctl restart sshd      重起服务\n* systemctl enable sshd      设定开机启动\n* systemctl disable sshd     设定开机不启动\n* systemctl reload sshd      重新加载配置文件\n* systemctl  list-units      列出已开启服务当前状态\n\n需要在你家里的linux 系统开启sshd 服务便于我们远程连接\n\n##### 二、下载翻墙穿透工具\n\n\n\n[下载Suidao.Client工具](https://github.com/SpringHgui/FastTunnel/releases)\n\n![image-20210224205236188](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210224205236188.png)\n\n##### 三、免费注册账号提供免费服务，对于延迟性要求不高可采用，对于有严格要求的服务谨慎，如需特殊服务请联系公众号\n\n[注册地址](https://suidao.io/)\n\n![image-20210224205539090](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210224205539090.png)\n\n进入个人中心创建隧道，官网介绍清楚，不再累赘介绍一定要记住秘钥\n\n\n\n##### 四、开启隧道客户端\n\n####  Windows\n\n直接双击 `SuiDao.Client.exe` 即可运行\n\n#### Linux\n\n```\nchmod +x SuiDao.Client`\n`./SuiDao.Client\n```\n\n#### Mac\n\n直接运行 `SuiDao.Client`\n\n之后按要求输入秘钥即可\n\n这样我们就可以顺利的将远程端口映射，并远程访问，这样就可以愉快的去旅游了。\n\n##### 五、按照此方法同样可以将其他接口映射外网\n\n比如tomcat 8080端口，nginx 80端口，我们可以做很多事情\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["技术","运维"]},{"title":"git常规操作","slug":"2021-02-18-tech-Blog","url":"/2021/02/18/2021-02-18-tech-Blog/","content":"\n\n\n###### 已有代码\n\n对于已有代码进行切换远程地址\n\n```\ncd existing_git_repo\n\ngit remote add origin git@gitee.com:XXX/flutter_shop.git\n\ngit push -u origin master\n```\n<!-- more--> \n###### 合并分支\n\n统一commit\n\n```\ngit checkout develop\n\ngit merge feature/isCanNoCardCommit\n```\n\n[修改冲突](https://www.blog.rdtalk.cn/2019/07/13/2019-07-13-git-Blog/)\n\n```\ngit add .\n\ngit commimt -m'注释'\n\ngit push \n```\n\n合并完成\n\n###### 放弃本地修改 的改法\n\n```\ngit reset --hard\n\ngit pull\n```\n\n###### 对于想去掉git版本控制的改法\n\n```\ngit rm -r --cached .\n\n```\n\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["git","运维","记录"]},{"title":"mysql时间差查询常规操作","slug":"2021-02-19-tech-Blog","url":"/2021/02/18/2021-02-19-tech-Blog/","content":"\n\n\n今天\n\n```\nselect * from 表名 where to_days(时间字段名) = to_days(now());\n```\n昨天\n```\nSELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1\n```\n近7天\n<!-- more--> \n```\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)\n```\n近30天\n```\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)\n本月SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )\n上一月SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( 时间字段名, '%Y%m' ) ) =1\n```\n查询本季度数据\n```\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());\n```\n查询上季度数据\n```\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));\n```\n查询本年数据\n```\nselect * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());\n```\n查询上年数据\n```\nselect * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));\n```\n查询当前这周的数据\n```\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now());\n```\n查询上周的数据\n```\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now())-1;\n```\n查询上个月的数据\n![51e409b11aa51c150090697429a953ed.gif](evernotecid://A70C830B-FADB-4C9E-AFA8-453E4049A178/appyinxiangcom/26577542/ENResource/p207)\n\n```\nselect name,submittime from enterprise where date_format(submittime,'%Y-%m')=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')\n\nselect * from user where DATE_FORMAT(pudate,'%Y%m') = DATE_FORMAT(CURDATE(),'%Y%m') ; \n\nselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = WEEKOFYEAR(now()) \n\nselect * from user where MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where YEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) select * from user where pudate between  上月最后一天  and 下月第一天 \n```\n![51e409b11aa51c150090697429a953ed.gif](evernotecid://A70C830B-FADB-4C9E-AFA8-453E4049A178/appyinxiangcom/26577542/ENResource/p207)\n查询当前月份的数据 \n```\nselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(now(),'%Y-%m')\n```\n查询距离当前现在6个月的数据\n```\nselect name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();\n```\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["运维","记录","mysql"]},{"title":"阿里服务器安装docker 给小程序 部署 springboot 项目","slug":"2021-01-24-tech-Blog","url":"/2021/01/24/2021-01-24-tech-Blog/","content":"\n\n\n序\n\n随着小程序的普及，大部分开发者都会有租个阿里服务器为小程序提供接口，恰巧我也正在开发一个股票、新债的小程序，但小程序一般都有两个需求（外网访问、https访问）,接口必须上云，所以才有今天的学习记录~\n\n一、在你的linux系统中安装docker\n\n`curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun`\n\n剩下的就让机器自己运行就好了\n<!-- more--> \n\n二、使用idea创建springboot项目，并打成jar包\n\n![image-20210124111314359](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210124111314359.png)\n\n这个大家都懂，就不再详细做介绍了\n\n<!-- more--> \n\n三、服务器 新建一个docker 文件夹存储打包文件 并写一个Dockerfile文件，并命名为：Dockerfile，文件内容如下：\n\n`mkdir -p /usr/local/docker/stock`\n\n```\n# 基础镜像使用java\nFROM openjdk:8-jdk-alpine\n# VOLUME 指定了临时文件目录为/tmp。\n# 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp\nVOLUME /tmp\n# 将jar包添加到容器中并更名为app.jar\nADD stock-0.0.1-SNAPSHOT.jar app.jar\n#RUN bash -c 'touch /app.jar'\n# 运行jar\nENV JAVA_OPTS=\"\"\nENTRYPOINT [ \"sh\", \"-c\", \"java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar -Duser.timezone=GMT+08 /app.jar\" ]\n```\n\n四、把Dockerfile文件和springboot项目打成的jar包，放入linux中的同一目录，在此目录下执行\n\n<!--特别注意最后的 .-->\n\n`docker build -t ${你要打成镜像的名称} .`\n\n`例：docker build -t wx-stock .`\n\n五、上述命令执行完毕之后，使用docker images命令，会看到有两个镜像，openjdk:8-jdk-alpine，wx-stock\n\n![image-20210124112156219](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210124112156219.png)\n\n至此已经将服务镜像安装完毕，接下来安装nginx镜像发布接口\n\n六、下载nginx镜像，执行命令，坐等完成，我服务器宽带比较小，坐等的时间比较长。。。\n\n`docker pull nginx:latest`  \n\n七、创建容器：\n\n1. 先创建文件夹：\n\n   `mkdir -p /data/nginx/conf.d/`\n\n2. ,然后执行下述命令创建容器：\n\n   `docker run -d -p 80:80 -v /data/nginx/conf.d/:/etc/nginx/conf.d/ --name nginx_mirror nginx`\n\n   `docker run -d -p 8080:8080 --name wx-stock_mirror wx-stock`\n\n容器创建完成之后，执行`docker ps`， 会发现两个运行着的容器\n\n![image-20210124113207329](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210124113207329.png)\n\n中间还有点插曲，后面补充----！<!--docker logs nginx_mirror-->\n\n八、配置nginx,并设置域名\n\n1. 购买域名\n\n阿里云或者腾讯云买一个域名，并实名认证 <u>现在很方便直接上传身份证照片即可备案，不像原来还邮寄幕布，拍照上传</u>，等待审核通过，等待DNS解析正常。\n\n2. 配置DNS解析\n\n我在阿里云购买的域名，所以以阿里云做案例,进入阿里云域名解析，点击解析设置，点击解析设置中的新手引导，直接添加你的记录值，注意此记录值为你安装nginx服务器的外网ip，添加完成即可\n\n![image-20210124114110871](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210124114110871.png)\n\n九、配置nginx\n\n在/data/nginx/conf.d/文件夹中创建以  .conf 结尾的配置文件，文件内容如下：\n\n```\nupstream wx-stock {\n                           ip_hash;\n                           server 服务器外网IP地址:jar服务端口号;\n                   }\n\n\n\nserver {\n                        listen     80;\n                        server_name 申请的域名 例 www.baidu.com;\n\n                        location / {\n                                proxy_set_header REMOTE-HOST $remote_addr;\n                                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                                proxy_set_header X-Real-IP $remote_addr;\n                                proxy_set_header Host $host;\n                                proxy_connect_timeout 3;\n                                proxy_send_timeout 30;\n                                proxy_read_timeout 30;\n                                index  index.html index.htm;\n                                proxy_pass http://wx-stock; //必须与upstream 名称一致\n                                rewrite ^/(.*)/$ /$1 last;\n                        }\n        }\n```\n\n\n\n十、配置完成nginx之后，需要重启nginx_mirror容器\n\n`docker restart nginx_mirror`\n\n\n\n按常理学习部署到此其实已经结束，已经满足我开发调试，但是访问我的域名显示404，到这就介绍一下插曲吧：\n\n1. 查看防火墙状态\n\n```\n[root@yingle conf.d]# systemctl status firewalld.service\n● firewalld.service - firewalld - dynamic firewall daemon\n   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)\n   Active: inactive (dead)\n     Docs: man:firewalld(1)\n\n```\n\n```\n[root@yingle conf.d]#  firewall-cmd --state\nnot running\n```\n\n排除了防火墙问题\n\n2. 查看设置阿里云安全策略\n\n   ![image-20210124115742768](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210124115742768.png)\n\n按理说这两个设置完就都完事了，怎么还是404？我急了\n\n3. 过分自信，还是查看一下日志吧\n\n   `docker logs nginx_mirror`\n\n   原来.conf文件错写了一个字母。。。\n\n看来服务器有问题还是得先看日志，不能盲目自信\n\n------------------------------------------------------------------------------------------------------分割线\n\nhttps访问  待更\n\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["理财","技术","运维"]},{"title":"tomcat https访问部署","slug":"2021-01-19-tech-Blog","url":"/2021/01/19/2021-01-19-tech-Blog/","content":"\n\n\n###### 自签名证书\n\n1. 利用java命令生成自定义签名证书\n\n   ```\n   keytool -genkey -alias tomcat -keypass 123456 -keyalg \"RSA\" -keystore \"e:\\tomcat.keystore\" \n   //可执行后输入\n   -storepass 123456\n   ```\n<!--more-->\n   \n\n<img src=\"https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210119220222540.png\" alt=\"image-20210119220222540\" style=\"zoom:80%;\" />\n\n2. tomcat 服务器修改server.xml\n\n\n\n   将8443端口注释放出来 (默认是8443 但是https请求需要带端口号，改成443端口便不用带端口号访问)\n\n   <img src=\"https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210120142402734.png\" alt=\"image-20210120142402734\" style=\"zoom:80%;\" />\n\n   ```\n   <Connector port=\"443\" protocol=\"org.apache.coyote.http11.Http11Protocol\"\n   \n           maxThreads=\"150\" SSLEnabled=\"true\" scheme=\"https\" secure=\"true\"\n   \n           clientAuth=\"false\" sslProtocol=\"TLS\" \n   \n           keystoreFile=\"E:\\tomcat.keystore\" \n   \n           keystorePass=\"123456\"/>\n   ```\n\n   将 http请求重定向到https\n\n   修改conf.xml\n\n   ![image-20210120142912182](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210120142912182.png)\n\n   ```\n       <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n                  connectionTimeout=\"20000\"\n                  redirectPort=\"443\" />\n   ```\n\n   修改web.xml\n\n   ![image-20210120150406141](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210120150406141.png)\n\n   ```\n       <login-config>    \n       <!-- Authorization setting for SSL -->    \n       <auth-method>CLIENT-CERT</auth-method>    \n       <realm-name>Client Cert Users-only Area</realm-name>    \n   </login-config>    \n   <security-constraint>    \n       <!-- Authorization setting for SSL -->    \n       <web-resource-collection >    \n           <web-resource-name >SSL</web-resource-name>    \n           <url-pattern>/*</url-pattern>    \n       </web-resource-collection>    \n       <user-data-constraint>    \n           <transport-guarantee>CONFIDENTIAL</transport-guarantee>    \n       </user-data-constraint>    \n   </security-constraint>\n   ```\n\n   测试成功，但是这个一般都会报不安全,而且小程序是不支持该种方式的https请求的\n\n\n\n![image-20210120090953789](https://gitee.com/yingle1991/resource/raw/master/static/blog/image-20210120090953789.png)\n\n###### 阿里云免费证书\n\n​\t登录阿里云在控制台可免费申请20个SSL认证证书，虽不保证安全，但是小程序是允许这种加密方式调用的，因此需要在阿里云申请免费的证书替换自定义生成的即可使用\n\n\n\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["技术","运维"]},{"title":"service 启动 tomcat 后台保存以及查看 汉字编码异常解决","slug":"2021-01-18-tech-Blog","url":"/2021/01/18/2021-01-18-tech-Blog/","content":"\n\n\n**### 用startup.bat启动**\n\n编码解决：\n\n用编辑器打开catalina.bat文件找到set \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% \n\n\"更改为 set \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% -Dfile.encoding=UTF-8\"\n\n问题得到解决 \n\n**### 用service启动**\n<!--more-->\n\n\n编码解决：\n\n1. 修改catalina.bat\n\n用编辑器打开catalina.bat文件找到set \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% \n\n\"更改为 set \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% -Dfile.encoding=UTF-8\"\n\n删除service重新注册一遍\n\n2. 修改 service.bat\n\n在service.bat中添加-Dfile.encoding=UTF-8如下图所示，记得分号隔开哦！\n\n![图片](https://gitee.com/yingle1991/resource/raw/master/static/blog/v2-614a4778aa9628bbb1195110d00ac8ab_r.png)\n\n重新运行运行service.bat install安装tomcat服务。\n\n3. 未验证，猜测解决办法\n\n\n\n另一个解决方案是直接修改注册表里的值，重启tomcat就好了，注册表路径：HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Apache Software Foundation\\Procrun 2.0\\Tomcat服务名\\Parameters\\Java\n\n\n\n找到Options\n\n\n\n增加-Dfile.encoding=UTF-8\n\n\n\n分享程序员的理财、生活！我是乐子，多多指教！\n\n\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)","tags":["技术","bug","运维"]},{"title":"登录token认证以及密码加密","slug":"2020-12-10-flutter-Blog","url":"/2020/12/10/2020-12-10-flutter-Blog/","content":"\n#### 1.登录认证\n\n\n\n``` java\nmd5String 加密对象=时间戳\nmd5Key md5加密浴 =APITest\n    \nString enstr=Encrypter.encrypt(password,Encrypter.generateSign(md5String,md5Key));//传递所有密码以此方式加密传递\n\n    \nString denstr=Encrypter.decrypt(enstr,Encrypter.generateSign(md5String,md5Key));//后台所有密码以此方式解密\n\n```\n<!--more-->\n\n```flow\n\nst=>start: 开始\n\nop=>operation: 对用户密码进行解密操作\n\ncond=>condition: 判断框(是或否?)\n\nsub1=>subroutine: 登录验证\n\nio=>inputoutput: 返回登录用户(增加token）8小时有效\n\ne=>end: 结束框\n\nst->op->cond\n\ncond(yes)->io->e\n\ncond(no)->sub1(right)->cond\n\n```\n\n备注：返回token 下次访问接口需要 以Secret传递回来，8小时有效，否则返回未登录错误～\n\n ![关注我得到更多信息](/img/passme.png)\n","tags":["生活","技术"]},{"title":"typora和picgo使用","slug":"typora和picgo使用","url":"/2020/11/30/typora和picgo使用/","content":"\n\n\n## 序\n\nMarkdown是一种[轻量级标记语言](https://baike.baidu.com/item/轻量级标记语言/52671915)，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性，很适合我们这种技术极客博客创作使用。但是对于博客上传图片又不是很友好，于是 typora搭配picgo使用的方案应运而生。\n\n## 1.picgo下载\n\n下载地址[https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2]\n\n国内github下载比较慢我放到了百度云上\n\n下载链接: https://pan.baidu.com/s/1QtQSOR8xieXsEvjISl75UA 提取码: mi4w \n\n## 2.picgo码云插件\n\n- 在picgo插件栏中搜索gitee 2.0.3插件\n\n  ![](https://gitee.com/yingle1991/resource/raw/master/static/blog/QQ图片20201130200709.png)\n\n- 如果插件安装报错，请[点击这里](http://nodejs.cn/download/)下载并安装Node.js\n\n<!--more-->\n\n## 3.设置gitee仓库\n\n- 在gitee新建一个公开的资源仓库\n\n  ![](https://gitee.com/yingle1991/resource/raw/master/static/blog/QQ图片20201130200836.png)\n\n- 设置个人token\n\n  ![](https://gitee.com/yingle1991/resource/raw/master/static/blog/QQ图片20201130200927.png)\n\n## 4.设置picgo的gitee配置参数\n\nrepo：仓库地址去掉码云域名 https://gitee.com/yingle1991/resource\n\nbranch：主干\n\ntoken：上面设置的个人token\n\npath：是仓库中新建static文件夹\n\n![](https://gitee.com/yingle1991/resource/raw/master/static/blog/20201130200958.png)\n\n**点击设为默认图床，点击确定**\n\n## 5.激活PicGo-Server\n\n2.2.0 版本之后，**PicGo 内部会默认开启一个小型的服务器，用于配合其他应用来调用 PicGo 进行上传。**\n\n**如何设置呢？**\n\n打开 PicGo 详细页面，进入 **PicGo 设置–设置Server**\n\n参考下图进行设置即可。\n\n![](https://gitee.com/yingle1991/resource/raw/master/static/blog/QQ图片20201130201102.png)\n\n## 6.Typora设置\n\n### 版本要求\n\nTypora 0.9.84 及以上。\n\n### 设置\n\n**文件–偏好设置–图像**\n\n![](https://gitee.com/yingle1991/resource/raw/master/static/blog/QQ图片20201130201132.png)\n\n参考图片中的进行配置。\n\n选择本机 PicGo 的路径。\n\n### 7. 验证图片上传\n\n这里还可以**验证图片上传功能**。\n\n验证成功会返回下图结果：\n\n![](https://gitee.com/yingle1991/resource/raw/master/static/blog/QQ图片20201130201503.png)","tags":["生活杂谈"]},{"title":"记tomcat8 读取mysql longblob类型文本 乱码问题（实则UTF-8与GBK 混淆）","slug":"2020-04-01-tech-Blog","url":"/2020/04/01/2020-04-01-tech-Blog/","content":"\n### 用startup.bat启动\n编码解决：\n用编辑器打开catalina.bat文件找到set \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% \n\"更改为 set \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% -Dfile.encoding=UTF-8\"\n问题得到解决\n\n<!--more-->\n### 用service启动\n编码解决：\n用编辑器打开catalina.bat文件找到set \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% \n\"更改为 set \"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% -Dfile.encoding=UTF-8\"\n删除service重新注册一遍\n未验证，猜测解决办法\n\n另一个解决方案是直接修改注册表里的值，重启tomcat就好了，注册表路径：HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Apache Software Foundation\\Procrun 2.0\\Tomcat服务名\\Parameters\\Java\n\n找到Options\n\n增加-Dfile.encoding=UTF-8\n\n技术分享，我是认真的！我是乐子，多多指教！\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)\n","tags":["生活","技术"]},{"title":"怎样让你的钱生钱？","slug":"2019-09-29-live-Blog","url":"/2019/09/29/2019-09-29-live-Blog/","content":"\n基金定投\n\n基金定投就是基金定期投资，常见的有周定期，两周定期，月定期，周定期周期比较短，本人不建议，两周定投与月定投，大数据显示差异不大，我们可以依个人情况进行规划投资。\n<!--more-->\n定投虽然可以有效避开熊市的干扰，减少熊市的损失，但定投并不是永远最好的，在经济萧条，股市不确定性的时候定投是最好的选择，但是假如现在股市大盘已经跌到2600点，明显点位很低，就不再适合在做定投，可以每两周一次分三个月将可用资产加到仓位，以应对股市反弹带来的收益。\n\n大部分我们普通投资者，理解的定投就是定期投资，而不去进行后期管理，这就造成，有的人年收益50%-70%，而你的收益只在1.9%。\n\n基金投资并不只是选中一个板块，无限期的定时投资，产品需要根据经济状况以及政策支持进行替换，资产大比例，要根据后期实际情况大比例调整，比如今年，九月份，军工产业比较强势，可以加大军工产业的投资比例，还有最关键的管理就是止盈，大家都知道“不要追涨杀跌，而应该低买高卖”，要有满足感，在未来市场预测不怎么乐观，以及现有盈利已经达到自己的“目标标准”，可以适当的减仓，单产品盈利20%-30%减仓五分之一，单产品盈利40% 减仓四分之一，当单产品盈利达到50%，就应该注意了，这时候已经很危险了，我们应该减仓1/2以上，入兜为安，以免市场波动造成我们更大的损失，也不影响我们得到更多的盈利。\n\n纯属生活物语，我是乐子，多多指教！\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)\n","tags":["理财","生活"]},{"title":"初识指数基金","slug":"2019-09-28-live-Blog","url":"/2019/09/28/2019-09-28-live-Blog/","content":"\n《富爸爸穷爸爸》罗伯特开篇就讲到，作为孩子时就有创造“金钱”的想法，更何况我们作为开发者的成年人，更是想让钱生钱，“鸡”下蛋。方法有很多：股票、房地产、保险、黄金、石油等等，我比较偏爱与基金，总感觉基金的风险可控！\n\n<!--more-->\n股神巴菲特的“偏爱”\n\n  股神巴菲特也非常钟爱指数基金，在过去20多年间，他一直不厌其烦的像普通投资者推荐指数基金。在一次股东大会上当有人问道股神身后事会怎么处理，他居然建议太太在他死后去买标普500指数基金。然而过去几十年，巴菲特自己的伯克希尔哈撒韦的股票远远拍赢了标普500指数的涨幅，为什么他不建议自己的起子买自己家的股票？\n  并不是巴菲特不信任自己的接班人，而是他深刻理解人性的弱点---知易行难，很多道理我们都懂“不要追涨杀跌，而应该低买高卖”、“别人恐惧你贪婪，别人贪婪你恐惧”。但如果让你拿着真金白银跑到股市投资，你就全忘光了，往往别人贪婪你更贪，别人恐惧，你更恐惧，结果自想而知。巴菲特多次提到过，普通投资者长期跑不过大盘的原因就是追涨杀跌，根据组织机构的小道消息以及技术分析盲目频繁买卖股票，浪费了大部分手续费，其实不光普通投资者，主动型基金的基金经理同样有这样的弱点。所以巴菲特很是偏爱指数基金\n\n  下面我们就简单了解一下指数基金：\n\n# 指数基金分为被动型与主动型两种类型\n## 被动型指数基金\n跟随股票指数投资，“百分百”的按比例投资于股市，指数涨则赚，指数跌则赔，费用也相对来说比较低！\n### ETF基金\n由基金机构按批发价格买到手，再在二级市场以零售价格卖个普通投资者的运营方式。\n只在二级市场买得到，必须开通证券账户，与股票相同交易法则，交易当天买卖，总结几个投资秘诀\n#### “躺赚”秘诀\n溢价：批发价小于零售价；折价：批发价大于零售价\n规避溢价，入手折价\n建议：规模2亿以下不要碰，10亿以上才可考虑\n\n### ETF联接基金\n同ETF基金，普通投资者可在各个基金机构自由申赎的基金，95%以上需要投资于关联的ETF基金\n\n### LOF\n中国市场自主创造的一种基金品种，可在一二级市场自由玩弄，是ETF+ETF连接基金的结合体\n### 普通指数基金\n仓位往往只有90%、92%，最多也就94%，股市疯狂下跌时，投资者纷纷赎回，就不得不在地位卖出股票，造成很大的实际损失，而当股市疯狂上涨时，投资者纷纷申购，来不及建仓，基金真实收益远低于指数理论收益。\n\n## 挑选标准\n跟踪误差\n各大基金机构均可分析跟踪误差，要挑选跟踪误差小的指数基金\n\n成本\n场内的成本相对比较低，场外的不同基金存在着一些差异，相同板块的基金，选低成本不选高\n\n规模\n选大不选小，一是规模大的指数基金流动性比较好，不怕买不进，卖不出，也不会有清盘风险，二是规模越大的基金，操作受到的影响就越小，跟踪误差也会相对较小\n## 主动性指数基金\n### 增强型基金\n\n\n ![关注我得到更多信息](https://gitee.com/yingle1991/resource/raw/master/static/blog/passme.png)\n\n\n纯属生活物语，我是乐子，多多指教！\nyingle1991@163.com","tags":["理财","生活"]},{"title":"如何初始化本地项目到远程git仓库","slug":"2019-08-23-flutter-Blog","url":"/2019/08/23/2019-08-23-flutter-Blog/","content":"\n1. 通过命令git init把这个文件夹变成Git可管理的仓库\n\n      这时你会发现TEST里面多了个.git文件夹，它是Git用来跟踪和管理版本库的。如果你看不到，是因为它默认是隐藏文件，那你就需要设置一下让隐藏文件可见。\n\n<!--more-->\n2. 这时候你就可以把你的项目粘贴到这个本地Git仓库里面（粘贴后你可以通过git status来查看你当前的状态），然后通过git add把项目添加到仓库（或git add .把该目录下的所有文件添加到仓库，注意点是用空格隔开的）。在这个过程中你其实可以一直使用git status来查看你当前的状态。如果文件内有东西会出现红色的字，不是绿色，这不是错误。\n\n\n\n3. 这里提示你虽然把项目粘贴过来了，但还没有add到Git仓库上，然后我们通过git add .把刚才复制过来的项目全部添加到仓库上。\n\n   \n\n4. 用git commit -m \"日志\" 把项目提交到仓库。\n\n   \n\n5. 在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地仓库的命令行输入：\n\n   ``` $git remote add origin https://gitee.com/ttx_android/dispatching_cars.git```\n\n  \n\n6. 关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过：\n\n   `$ git push -u origin master -f`\n\n\n\n7. 测试修改成功\n\n\n\n\n\n纯属开发笔记，有啥补充尽可联系我~\nyingle1991@163.com","tags":["git","笔记","协作开发"]},{"title":"如何解决android.support.v4.content.FileProvider异常错误的问题？","slug":"2019-07-26-flutter-Blog","url":"/2019/07/26/2019-07-26-flutter-Blog/","content":"\n\n问题如下\n```\nUsing hardware rendering with device Android SDK built for x86 64. If you get graphics artifacts, consider enabling software rendering with\n\"--enable-software-rendering\".\nLaunching lib/main.dart on Android SDK built for x86 64 in debug mode...\nInitializing gradle...                                              1.5s\nResolving dependencies...                                          17.3s\nF:\\dartSpace\\flutter\\Demo\\salesman_field\\android\\app\\src\\main\\java\\com\\example\\salesman_field\\MainActivity.java:14: ����: �����android.support.v4.\ncontent������\nimport android.support.v4.content.FileProvider;\n                                 ^\nF:\\dartSpace\\flutter\\Demo\\salesman_field\\android\\app\\src\\main\\java\\com\\example\\salesman_field\\MainActivity.java:60: ����: �����android.support.v4.\ncontent������\n               Uri uri7 = android.support.v4.content.FileProvider.getUriForFile(this,\"com.example.salesman_field.android7.fileprovider\", apkFile);  \n                                                    ^\n2 ������\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':app:compileDebugJavaWithJavac'.\n> Compilation failed; see the compiler error output for details.\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 46s\nRunning Gradle task 'assembleDebug'...\nRunning Gradle task 'assembleDebug'... Done                        46.8s\n*******************************************************************************************\nThe Gradle failure may have been because of AndroidX incompatibilities in this Flutter app.\nSee https://goo.gl/CP92wY for more information on the problem and how to fix it.\n*******************************************************************************************\nGradle task assembleDebug failed with exit code 1\nPS F:\\dartSpace\\flutter\\Demo\\salesman_field> flutter run\nUsing hardware rendering with device Android SDK built for x86 64. If you get graphics artifacts, consider enabling software rendering with\n\"--enable-software-rendering\".\nLaunching lib/main.dart on Android SDK built for x86 64 in debug mode...\nInitializing gradle...                                              2.8s\nResolving dependencies...                                          33.7s\nF:\\dartSpace\\flutter\\Demo\\salesman_field\\android\\app\\src\\main\\java\\com\\example\\salesman_field\\MainActivity.java:61: ����: �����android.support.v4.\ncontent������\n               Uri uri7 = android.support.v4.content.FileProvider.getUriForFile(this,\"com.example.salesman_field.android7.fileprovider\", apkFile);  \n                                                    ^\n1 ������\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':app:compileDebugJavaWithJavac'.\n> Compilation failed; see the compiler error output for details.\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 26s\nRunning Gradle task 'assembleDebug'...\nRunning Gradle task 'assembleDebug'... Done                        27.4s\n*******************************************************************************************\nThe Gradle failure may have been because of AndroidX incompatibilities in this Flutter app.\nSee https://goo.gl/CP92wY for more information on the problem and how to fix it.\n*******************************************************************************************\nGradle task assembleDebug failed with exit code 1\n```\n\n为兼容24之上版本代码做了些改变报错，查阅资料\n\n```\nandroid.support.v4.content.FileProvider->androidx.core.content.FileProvider\n````\n问题解决\n\n纯属开发笔记，有啥补充尽可联系我~\nyingle1991@163.com","tags":["笔记","协作开发","flutter"]},{"title":"Git出现代码冲突怎么办？","slug":"2019-07-13-git-Blog","url":"/2019/07/13/2019-07-13-git-Blog/","content":"\n我们在同步代码通常会先git pull，git pull时很频繁的遇到冲突的时候，如下面提示\n\n```\nerror: Your local changes to the following files would be overwritten by merge:\n    jiddpb-admin/src/main/java/io/terminus/jiddpb/admin/report/JiddPBReports.java\n    jiddpb-bid/src/main/java/io/terminus/jiddpb/bid/service/JiddpbReportServiceImpl.java\nPlease commit your changes or stash them before you merge.\n```\n\n这个意思就是说服务器上的代码与本地修改内容有冲突，先提交你的改变或者储存起来你的改变.\n\n处理的方式很简单，跟提示走永远不愁，主要使用git 储存命令进行处理，步骤如下：\n\n##1. 先将本地修改使用git stash 命令储存起来\n\tgit stash\n\n这样本地修改就被git 储存起来了，使用 git stash list 即可查到保存信息：\n\t\n![](https://i.imgur.com/LbSqfQr.png)\n\n其中 stash@{0} 就是刚才储存的标记\n\n##2. pull服务器内容\n\n存储了本地变动就可以pull服务器代码了\n\n```\ngit pull\n```\n\n##3. 还原暂存代码\n\tgit stash pop\n系统提示一下信息\n![](https://i.imgur.com/F4QyRf0.png)\n意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。\n\n##4、解决文件中冲突的的部分\n\n打开冲突的文件，会看到类似如下的内容：\n\n![](https://i.imgur.com/Zdl1etu.png)\n\ngit冲突内容\n\n其中Updated upstream 和=====之间的内容就是pull下来的内容，====和stashed changes之间的内容就是本地修改的内容。碰到这种情况，git也不知道哪行内容是需要的，所以要自行确定需要的内容。\n解决完成之后，就可以正常的提交了。\n\n纯属开发笔记，有啥补充尽可联系我~\nyingle1991@163.com","tags":["git","随笔","协作开发"]},{"title":"SAP调用外部接口","slug":"2019-07-10-work-Blog","url":"/2019/07/11/2019-07-10-work-Blog/","content":"\n###SAP调用外部接口遇到的坑\n\n开始\n\n1. SE80，创建web service proxy\n\n   1）SE80，选择package，右击->create->Enterprise service\n   2) Object Type, 选择Service Consumer，继续\n   3）Select source，选择URL/HTTP Destination，继续\n   4）URL中输入网址，继续\n   5）分配package和前缀(随意)，完成\n   6）保存，激活\n   \n2. LPCONFIG，创建逻辑端口\n\n   1）输入proxy class(第1步中生成的proxy name)和logical port(随意，通常同proxy class)，选中Default port\n   2）输入描述，选中message id 和 state management\n   3）调用参数：URL输入去掉?WSDL的地址\n   4）操作：右侧SOAP操作，输入xml文件中soapAction等号后的内容，包括引号\n   \n3. 程序调用web service\n   例子：\n  \n   ```\n   DATA:\n           lo_clientproxy      TYPE REF TO z_proxy. \"proxy class\n        DATA:\n           lo_input           TYPE z_input,      \"输入参数\n           lo_output          TYPE z_output.     \"输出参数\n   \n     lo_request =  request.\n   \n     CREATE OBJECT lo_clientproxy.\n     TRY.\n         CALL METHOD lo_clientproxy->z_method \"web service函数\n           EXPORTING\n             to_input  = lo_input\n           IMPORTING\n             to_output = lo_output.\n   \n   - ***Write Out the Basic Information\n     CATCH cx_ai_system_fault INTO g_sys_exception.\"捕获错误\n       IF g_sys_exception IS NOT INITIAL.\n         WRITE: 'Error:Communication Error'.\n       ENDIF.\n     CATCH cx_ai_application_fault INTO g_app_exception.\n       IF g_app_exception IS NOT INITIAL.\n         WRITE 'Error:Application Error'.\n       ENDIF.\n     ENDTRY.\n   ```\n测试问题一：\n第一步时，遇到问题HTTP 404问题，但是链接直接可以浏览器打开\n解决方案：\n1. 将网址链接(JAVA发布的web service通常以?wsdl结尾)，另存到本地，保存为xml文件\n2. 修改xml文件，删除下面内容，删除后保存\n\n\t```\n\t<wsdl:binding ……>    ……  </wsdl:binding>\n\t<wsdl:port …….>    …….</wsdl:port>\n\n\t```\n\n3. SE80创建web service proxy时，就Select source，选择Local file，其他都一样\n刚看一个链接里有介绍：http://hi.baidu.com/tktik/item/fcaf0e53e26cbe3a32e0a951\n\n测试问题二：\n连接总是不同，一直有cx_ai_system_fault异常\n解决方案：\n    将逻辑端口中的域名改为ip地址\n\t\n对于这个问题可以打印输出一把错误excption\n\n     CATCH CX_AI_SYSTEM_FAULT INTO exref.\n      zflag = exref->GET_TEXT( ).\n\n值得注意的是，实现该功能，不需要创建RFC连接\n\n纯属开发笔记，有啥补充尽可联系我~\nyingle1991@163.com","tags":["笔记","SAP"]},{"title":"服务器初始化java 环境记录","slug":"2018-06-25-work-Blog","url":"/2018/06/25/2018-06-25-work-Blog/","content":"\n###服务器初始化java 环境记录\n\n接到外包将一个简单的web项目部署到系统，也由于好久没做过基本配置了。现记录如下：\n由于要部署的服务器不在外网公布，所以部署需要在teamViewer的配合下，安装个人版，设置为开机启动（你懂的。。。）\n\n1. 下载Java绿色安装包，配置环境变量\n\t\n\t\t配置java_home\n\t\tJAVA_HOME:'E:\\work_tool\\java1.8.131\\jdk1.8.0_131'\n\n\t\t增加PATH\n\t\tPATH+='%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;'\n\n\t\t配置CLASS_PATH\n\t\tCLASS_PATH:'.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar'\n2. 安装mysql，可视化工具（可选）\n\t\t\n\t\t默认就好，导入sql,source d:/xxx.sql;\n\n3. 安装tomcat\n\t\t\n\t\t绿色版：\n\t\t解压将打出war包放到webapps，待加压完成之后修改配置文件sql账号密码；\n\t\t进入 tomcat bin目录 \n\t\t安装tomcat服务\n\t\tservice.bat install\n\t\t移除 tomcat服务\n\t\tservices.bat remove\n\n\n纯属开发笔记，有啥补充尽可联系我~\nyingle1991@gmail.com","tags":["笔记"]},{"title":"技术交接记录","slug":"2018-05-15-work-Blog","url":"/2018/05/15/2018-05-15-work-Blog/","content":"\n##端点进行阳光采购前后台培训##\n\n测试:\n\n\ttcg.jdsn.com.cn\n\ttacg.jdsn.com.cn\n\n预发：\n\n\tqcg.jdsn.com.cn\n\tqacg.jdsn.com.cn\n正式：\n\n\tcg.jdsn.com.cn\n\tacg.jdsn.com.cn\n\n1. 前台操作步骤\n- \n\n>components/ resource内\n> \n> front_config.yaml 表单注册关系；\n\n> back_config.yaml URL与注册关联真实路径（后台提供);\n> \n> view.hbs 可视化界面（主界面）\n\n> *-setting 主要设计模板运用的内容界面（list遍历，数据打印）\n\n2. git 工作流程\n-\n![工作流程图](https://i.imgur.com/9ZPU5pY.png)\n\n1. master-正式发布版\n\n    保留正式环境发布代码最新\n2. devlop-开发测试版\n\n    供业务人员测试环境\n3. release-预发版\n\n    从开发测试切出分支到release,预发测试，有改动，合并到devlop与master分支\n4. feature-开发功能版（可有多个）\n\n    开发接到新功能，从dev分支down下然后再feature目录下创建新分支，开发完毕合并到devlop分支\n\n5. hotfix-紧急开发任务\n\n    紧急开发任务从master 分支down 下主要代码，开发测试完毕合并到devlop 分支与master 分支保证代码最新\n\n3. git 命令\n-\n- 下载\n\n    git clone git地址\n\n- 切换本地分支\n\n    git checkout -b develop origin/develop\n\n待完善。。。。\n\n4.代码级应用\n-\n\nExtraMap.get(article.getExtra())==>\n    ##端点进行阳光采购前后台培训##\n    \n    测试:\n    \n    \ttcg.jdsn.com.cn\n    \ttacg.jdsn.com.cn\n    \n    预发：\n    \n    \tqcg.jdsn.com.cn\n    \tqacg.jdsn.com.cn\n    正式：\n    \n    \tcg.jdsn.com.cn\n    \tacg.jdsn.com.cn\n    \n    1. 前台操作步骤\n    - \n    \n    >components/ resource内\n    > \n    > front_config.yaml 表单注册关系；\n    \n    > back_config.yaml URL与注册关联真实路径（后台提供);\n    > \n    > view.hbs 可视化界面（主界面）\n    \n    > *-setting 主要设计模板运用的内容界面（list遍历，数据打印）\n    \n    2. git 工作流程\n    -\n    ![工作流程图](https://i.imgur.com/9ZPU5pY.png)\n    \n    1. master-正式发布版\n    \n        保留正式环境发布代码最新\n    2. devlop-开发测试版\n    \n        供业务人员测试环境\n    3. release-预发版\n    \n        从开发测试切出分支到release,预发测试，有改动，合并到devlop与master分支\n    4. feature-开发功能版（可有多个）\n    \n        开发接到新功能，从dev分支down下然后再feature目录下创建新分支，开发完毕合并到devlop分支\n    \n    5. hotfix-紧急开发任务\n    \n        紧急开发任务从master 分支down 下主要代码，开发测试完毕合并到devlop 分支与master 分支保证代码最新\n    \n    3. git 命令\n    -\n    - 下载\n    \n        git clone git地址\n    \n    - 切换本地分支\n    \n        git checkout -b develop origin/develop\n    \n    待完善。。。。\n    \n    4.代码级应用\n    -\n    \n    ExtraMap.get(article.getExtra())==>\n        \n\n\n纯属开发笔记，有啥补充尽可联系我~\nyingle1991@gmail.com","tags":["笔记"]},{"title":"Hello World","slug":"hello-world","url":"/2018/04/01/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"},{"title":"忆开发中的坏习惯","slug":"2017-09-29-git-Blog","url":"/2017/09/29/2017-09-29-git-Blog/","content":"\n昨天晚上项目更新上线，以我这大大咧咧的性格当然是比较繁琐、麻烦了，先总结出错的地方 以记录改正。\n\n----------\n项目开发周期无非涉及日常开发（前、后台部分）、数据库表结构、视图、函数的修改，测试环境部署branches ->trunk 现在整理一下每个过程需要注意的地方\n\n日常开发部分：\n\n1. 每天第一件事先从svn down 下最新代码包\n2. 确定连接开发库，忌讳连接本地库以及正式库\n3. 确定与项目组成员修改不同功能模块尤其前后台分离的项目\n4. 记录修改了哪些前台模块 以备正式发布导出\n\n数据库表结构、视图、函数的修改\n\n1. 表结构、视图的新建修改一定要记录！记录！记录（我吃了很大亏）\n2. 对于函数尽可能的记录函数干嘛的，不要重复建立，尽可能的复用：这里我要多说一句统计函数尽可能独立建立，缩减查询列，对于大数据是很消耗资源的\n3. 避免使用*\n\n测试环境部署branches\n\n1. 前后台一定同步更新，改动少可以class 部署\n2. war 包部署，注意上传文件的保护\n\n发布准备\n\n1. 每个程序员分别导出自己修改的几个wb模块；\n2. 每个程序员记住自己的数据库修改内容，包括：修改的表字段、表、视图、函数、存储过程、序列、索引等；\n3. 每个程序员记住自己的项目内容的修改，包括：可配置的键值内容的修改、新增功能授权给哪些人、工作流的配置修改等；\n4. 如果涉及到批量更新数据，需要写好sql，在测试环境中测试通过。\n\n正式环境操作\n\n1. 备份\n①备份正式数据库\n②导出现有的所有wb模块\n2. 将svn的“开发分支”合并到“trunk主分支”上，注意相关数据库地址、微信地址等需要是正式地址；导出war包，或者导出编译后的增量变化的内容；\n3. 发布之前，预估一下发布的时间，通知客户停止使用；\n4. 进行内容发布\n（1）java程序（如果服务器有多台，需要多台上都进行如下操作）\n①备份正式服务器上tomcat下的项目目录；\n②将增量变化的内容复制到测试服务器上tomcat下的项目目录中，覆盖已有的内容，重启tomcat（如果只修改jsp不需要重启）\n如果导出的是war包，可将war包放到与项目目录同级的目录下，删除原有的项目目录【注意附件等内容】\n（2）数据库内容\n按照事前的整理，进行数据库内容的修改，包括批量更新数据\n（3）wb模块\n①按照事前的整理，进行多个wb模块的导入\n②登录集成开发环境，进行模块更新（如果服务器有多台，需要多台上都进行如下操作）\n（4）项目内容的修改\n按照事前的整理，进行项目内容的修改\n5. 发布后，进行测试；\n6. 测试通过后，通知客户重新登录使用。\n\n\n\n\n纯属开发笔记，有啥补充尽可联系我~\nyingle1991@gmail.com","tags":["笔记"]},{"title":"用git与Jekyll 搭建面向世界的博客","slug":"2016-11-11-git-Blog","url":"/2016/11/11/2016-11-11-git-Blog/","content":"\n经历了两天，从小白整成了一套git 与Jekyll 结合的博客主页，首先感谢那些善于分享的伙伴们，同时也遇到了一些小麻烦，先总结并记录到此文章.\n\n不经意看到知乎上的吴小龙同学说起如何自己设计开发手机app,如何一步一步成长，接触中我看到了他也在玩博客，而且玩的特别6，终于勾起了我的好奇心，决定自己动手买面包吃.\n\n安装期间特别感谢来自热心网友的 [搭建一个免费的，无限流量的Blog](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)，\n\n首先注册一个一个github帐号因为以后博客是要“寄存”在github的;现在一个git安装到PC，然后在本机新建文件夹MyBlog;\n<Strong>第一步:</strong>：进入文件夹git 初始化：git init\n\n<Strong>第二步:</strong> 创建没有父节点的分支gh-pages git checkout --orghan gh-pages\n\n<Strong>第三步:</strong>创建设置文件 _config.yml 添加内容 baseurl: /MyBlog\n\n<Strong>第四步:</strong>创建模版文件目录 _layouts 存放所有模版文件\n\n<Strong>第五步:</strong>创建default.html \n       \n\n<Strong>第六步：</strong>创建文章目录 _posts 存放自己的博客\n\n<Strong>第七步：</strong>创建第一个post\n\n\n每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线\"---\"，标记开始和结束，里面每一行设置一种元数据。\"layout:default\"，表示该文章的模板使用_layouts目录下的default.html文件；\"title: 你好，世界\"，表示该文章的标题是\"你好，世界\"，如果不设置这个值，默认使用嵌入文件名的标题，即\"hello world\"。\n在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。{{ page.title }}就是文件头中设置的\"你好，世界\"，{{ page.date }}则是嵌入文件名的日期（也可以在文件头重新定义date变量），\"| date_to_string\"表示将page.date变量转化成人类可读的格式。\n\n<Strong>第八步:</strong>新建主页，我们博客访问的页面\n\n\n\n它的Yaml文件头表示，首页使用default模板，标题为\"我的Blog\"。然后，首页使用了`{for post in site.posts }`，表示对所有帖子进行一个遍历。这里要注意的是，Liquid模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于{{site.baseurl}}就是_config.yml中设置的baseurl变量。\n\n<Strong>第九步:</strong>最后在注册的github上新建个MyBlog，上传新建的项目，\n\n访问\nwww.username.github.<strong>io</strong>/MyBlog 后缀是io,是不是可以正常访问了呢？\n\n很多同学都会感觉那个连接地址很麻烦，不喜欢，因此下一步就是去绑定域名：\n\n<Strong>第十步:</strong>根目录新建CNAME文件没有后缀；\n \t\n内容是你想要绑定的域名 ：比如www.zhangxiaole.me,内容就是zhangxiaole.me\n\n<Strong>第十一步:</strong>去编辑域名DNS 解析添加A记录尝试没有成功，我直接用的redirect跳转哈哈。。。\n\n\n最后肯定都不喜欢自己的样式，因此可以去网上找些jelly 的博客主题套用在自己的博客上，我用的是黄轩同学提供在知乎上的主题，感觉还不错；当然你可以自己查找替换了！\n\n附：博客常用的git 命令：\n\n1. git add\n2. git commit\n3. git push origin\n\n书写错误的地方请同学们纠正，联系我~\nyingle1991@gmail.com","tags":["git"]}]